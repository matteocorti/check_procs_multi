#!perl

# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id: check_dir 856 2007-10-31 09:34:21Z corti $
#   $Revision: 856 $
#   $HeadURL: https://svn.id.ethz.ch/nagios_plugins/check_dir/check_dir $
#   $Date: 2007-10-31 10:34:21 +0100 (Wed, 31 Oct 2007) $

use strict;
use warnings;

use 5.008;

use Getopt::Long;
use Carp;
use English qw(-no_match_vars);

use Nagios::Plugin;
use Nagios::Plugin::Threshold;
use Net::DNS::Resolver;
use File::Slurp;
use Pod::Usage qw(pod2usage);

use version; our $VERSION = '0.9.3';

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $downstream
  $help
  $host
  $host_ip
  $host_port
  $iperf
  $local_ip
  $local_port
  $plugin
  $result
  $swap
  $threshold
  $upstream
  $verbosity
  %direction
);

##############################################################################
# subroutines

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        print $message;
    }

    return;

}

##################################################
# gets the IP of a host
# param host
sub get_ip {

    my $host = shift;

    if ( $host =~
/((25[0-5]|2[0-4][0-9]|([01]?[0-9]?[0-9]))\.){3}(25[0-5]|2[0-4][0-9]|([01]?[0-9]?[0-9]))/mx
      )
    {
        return $host;
    }

    my $dns_resolver = Net::DNS::Resolver->new();

    verbose "get IP address for $host: ", 1;

    my $query = $dns_resolver->search($host);

    if ($query) {
        foreach my $rr ( $query->answer() ) {
            if ( $rr->type() eq 'A' ) {
                verbose $rr->address() . "\n", 1;
                return $rr->address;
            }
        }
    }

    unknown("cannot get the address of $host ("
          . $dns_resolver->errorstring
          . ')' );

    return;

}

##############################################################################
# Usage     : check_positive_integer($number)
# Purpose   : checks if the argument is a valid positive integer
# Returns   : true if the number is valid
# Arguments : number to test
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_positive_integer {
    my $number = shift;
    return $number =~ /^[0-9]+$/mx;
}

##############################################################################
# Usage     : get_path('program_name');
# Purpose   : retrieves the path of an executable file using the
#             'which' utility
# Returns   : the path of the program (if found)
# Arguments : the program name
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub get_path {

    my $prog = shift;
    my $path;

    my $which_command = "which $prog";
    my $which_output;

    open $which_output, q{-|}, "$which_command 2>&1"
      or $plugin->nagios_exit( UNKNOWN,
        "Cannot execute $which_command: $OS_ERROR" );

    while (<$which_output>) {
        chomp;
        if ( !/^which:/mx ) {
            $path = $_;
        }
    }

    if ( !( close $which_output )
        && ( $OS_ERROR != 0 ) )
    {

        # close to a piped open return false if the command with non-zero
        # status. In this case $! is set to 0
        $plugin->nagios_exit( UNKNOWN,
            "Error while closing pipe to $which_command: $OS_ERROR" );
    }

    return $path;

}

##############################################################################
# main

# initialization
$iperf     = q{};
$plugin    = Nagios::Plugin->new( shortname => 'CHECK_BANDWIDTH' );
$verbosity = 0;

########################
# Command line arguments

Getopt::Long::Configure( 'bundling', 'no_ignore_case' );
$result = GetOptions(
    'iperf=s'       => \$iperf,
    'help|h|?'      => \$help,
    'host|H=s'      => \$host,
    'hostport|p=i'  => \$host_port,
    'localport|l=i' => \$local_port,
    'swap|s'        => \$swap,
    'verbose|v+'    => \$verbosity,
    'version|V' => sub { print "check_bandwidth version $VERSION\n"; exit 3; },
);

if ($help) { pod2usage(); }

###############
# Sanity checks

# syntax
if ( !$result ) {
    pod2usage();
}

# host
if ( !defined $host ) {
    pod2usage( -message => 'No host specified' );
}

##########################
# Sanity checks: utilities

if ( !$iperf ) {
    $iperf = get_path('iperf');
}

if ( !$iperf ) {
    $plugin->nagios_exit( UNKNOWN, 'Unable to find the "iperf" utility"' );
}

if ( !-x $iperf ) {
    $plugin->nagios_exit( UNKNOWN, "$iperf is not executable" );
}

verbose "using $iperf\n", 2;

##################################
# perform the test

my $host_ip = get_ip($host);

my $command = "$iperf --client $host_ip --tradeoff --format k";

if ( defined $local_port ) {
    $command = $command . " --listenport $local_port";
}
if ( defined $host_port ) {
    $command = $command . " --port $host_port";
}

my $output;

verbose "Executing \"$command\"\n";

my $pid = open $output, q{-|}, "$command 2>&1"
  or $plugin->nagios_exit( UNKNOWN, "Cannot execute $command: $OS_ERROR" );

# process command outpt
# expexted format (example)
#
# ------------------------------------------------------------
# Server listening on TCP port 5001
# TCP window size: 85.3 KByte (default)
# ------------------------------------------------------------
# ------------------------------------------------------------
# Client connecting to example.com, TCP port 5001
# TCP window size: 16.0 KByte (default)
# ------------------------------------------------------------
# [  5] local 192.168.1.1 port 57003 connected with 192.168.1.2 port 5001
# [  4] local 192.168.1.1 port 5001 connected with 192.168.1.2 port 37068
# [  5]  0.0-10.0 sec  81.7 MBytes  68.5 Mbits/sec
# [  4]  0.0-10.0 sec  85.6 MBytes  71.8 Mbits/sec

# read the whole file
my @lines = read_file($output);

if ( $verbosity > 1 ) {
    for my $line (@lines) {
        verbose "$line", 1;
    }
}

# process output
for my $line (@lines) {

    if ( $line =~ /^\[\ *[0-9]+\]\ local.*/mx ) {
        next;
    }

    if ( $line =~ /^[\\ *[0-9]+\]\ \ .*\ ([0-9]+)\ Kbits\/sec/mx ) {
        if ( !defined $upstream ) {
            $upstream = $1;
        }
        else {
            $downstream = $1;
        }
    }

}

if ( !defined $upstream || !defined $downstream ) {
    $plugin->nagios_exit( UNKNOWN,
        "Cannot parse up- and downstream speed: check $command output" );
}

if ( defined $swap ) {
    ( $upstream, $downstream ) = ( $downstream, $upstream );
}

$plugin->add_perfdata(
    label => 'up',
    value => $upstream,
    uom   => 'K',
);

$plugin->add_perfdata(
    label => 'down',
    value => $downstream,
    uom   => 'K',
);

if ( !( close $output )
    && ( $OS_ERROR != 0 ) )
{

    # close to a piped open return false if the command with non-zero
    # status. In this case $! is set to 0
    $plugin->nagios_exit( UNKNOWN,
        "Error while closing pipe to $command: $OS_ERROR" );
}

$plugin->nagios_exit( OK, "down/up $upstream/$downstream Kbits/s" );

1;

__END__

=pod

=head1 NAME

C<check_bandwidth> - a Nagios plugin to monitor a connection's bandwidth using iperf

=head1 DESCRIPTION

check_bandwidth is a Nagios plugin to monitor a connection's bandwidth using iperf

Note that thet it reauires iperf running in server mode on the connected server

=head1 VERSION

Version 0.9.3

=head1 SYNOPSIS

 check_bandwidth --host hostname
            [--iperf path]
            [--localport port] [--hostport port]
            [--verbose]
            [--version|--help]

 Mandatory arguments:
  --host,-h       hostname   check the bandwidth from localhost to 'hostname'

 Options:
  --iperf         path       path of the iperf utility
  --localport,-l  port       local port
  --hostport,-p   port       remote port
  --swap,-s                  swap down- and upstream statistics
  --version,V                print version number
  --verbose,-v               be more verbose (can be repeated)

=head1 REQUIRED ARGUMENTS

--host

=head1 OPTIONS

    --host,-h       hostname   check the bandwidth from localhost to 'hostname'

    --iperf         path       path of the iperf utility

    --help,-h,-?               this help screen

    --hostport,-p   port       remote port

    --localport,-l  port       local port

    --swap,-s                  swap down- and upstream statistics

    --verbose,-v               increase verbosity (can be repeated)

    --version,-V               prints version information

=head1 EXAMPLE

check_bandwidth --iperf /opt/bin/iperf --host example.com --localport 5002 --hostport 5001

check_bandwidth check is the percentage of free memory is lower than 10% or 5% respectively
by connecting to an iperf server running on example.com at port 5001. The server will then
connect to our client to port 5002 for the test in the other direction. See the documentation
of iperf for the details.

=head1 DIAGNOSTICS

You can specify multiple --verbose options to increase the program
verbosity.

=head1 EXIT STATUS

0 if OK, 1 in case of a warning, 2 in case of a critical status and 3
in case of an unkown problem

=head1 DEPENDENCIES

check_bandwidth depends on

=over 4

=item * Carp

=item * English

=item * File::Slurp

=item * Getopt::Long

=item * Nagios::Plugin

=item * Nagios::Plugin::Threshold

=item * Net::DNS::Resolver

=item * version

=back

=head1 CONFIGURATION

=head1 INCOMPATIBILITIES

None reported.

=head1 SEE ALSO

Nagios documentation

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to matteo.corti@id.ethz.ch,
or through the web interface at
https://svn.id.ethz.ch/trac/bd_webhosting/newticket

=head1 AUTHOR

Matteo Corti <matteo.corti@id.ethz.ch>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2007, ETH Zurich.

This module is free software; you can redistribute it and/or modify it
under the terms of GNU general public license (gpl) version 3.
See the LICENSE file for details.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=head1 ACKNOWLEDGMENTS

